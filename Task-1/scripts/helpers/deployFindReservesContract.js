const { ethers } = require('hardhat');



// set the right variables
const MODE = "GOERLI"
const PROV = process.env[MODE]

const pvKey = process.env.PRIV_KEY;

// Connect to a provider (e.g., Infura, Alchemy)
const provider = new ethers.JsonRpcProvider(PROV);

// Create a Wallet
const signer = new ethers.Wallet(pvKey, provider);

// Contract ABI
const contractABI  = [
    {
      "inputs": [
        {
          "internalType": "contract IUniswapV2Pair[]",
          "name": "_pairs",
          "type": "address[]"
        }
      ],
      "name": "getReservesByPairs",
      "outputs": [
        {
          "internalType": "uint256[3][]",
          "name": "",
          "type": "uint256[3][]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ]

// contract Bytecode:
const contractBytecode = "0x608060405234801561001057600080fd5b50610734806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80634dbf0f3914610030575b600080fd5b61004a600480360381019061004591906102e4565b610060565b6040516100579190610495565b60405180910390f35b606060008383905067ffffffffffffffff811115610081576100806104b7565b5b6040519080825280602002602001820160405280156100ba57816020015b6100a7610253565b81526020019060019003908161009f5790505b50905060005b84849050811015610248578484828181106100de576100dd6104e6565b5b90506020020160208101906100f39190610585565b73ffffffffffffffffffffffffffffffffffffffff16630902f1ac6040518163ffffffff1660e01b8152600401606060405180830381865afa15801561013d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101619190610634565b826dffffffffffffffffffffffffffff169250816dffffffffffffffffffffffffffff1691508063ffffffff1690508484815181106101a3576101a26104e6565b5b60200260200101516000600381106101be576101bd6104e6565b5b602002018585815181106101d5576101d46104e6565b5b60200260200101516001600381106101f0576101ef6104e6565b5b60200201868681518110610207576102066104e6565b5b6020026020010151600260038110610222576102216104e6565b5b602002018381525083815250838152505050508080610240906106b6565b9150506100c0565b508091505092915050565b6040518060600160405280600390602082028036833780820191505090505090565b600080fd5b600080fd5b600080fd5b600080fd5b600080fd5b60008083601f8401126102a4576102a361027f565b5b8235905067ffffffffffffffff8111156102c1576102c0610284565b5b6020830191508360208202830111156102dd576102dc610289565b5b9250929050565b600080602083850312156102fb576102fa610275565b5b600083013567ffffffffffffffff8111156103195761031861027a565b5b6103258582860161028e565b92509250509250929050565b600081519050919050565b600082825260208201905092915050565b6000819050602082019050919050565b600060039050919050565b600081905092915050565b6000819050919050565b6000819050919050565b6103908161037d565b82525050565b60006103a28383610387565b60208301905092915050565b6000602082019050919050565b6103c48161035d565b6103ce8184610368565b92506103d982610373565b8060005b8381101561040a5781516103f18782610396565b96506103fc836103ae565b9250506001810190506103dd565b505050505050565b600061041e83836103bb565b60608301905092915050565b6000602082019050919050565b600061044282610331565b61044c818561033c565b93506104578361034d565b8060005b8381101561048857815161046f8882610412565b975061047a8361042a565b92505060018101905061045b565b5085935050505092915050565b600060208201905081810360008301526104af8184610437565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061054082610515565b9050919050565b600061055282610535565b9050919050565b61056281610547565b811461056d57600080fd5b50565b60008135905061057f81610559565b92915050565b60006020828403121561059b5761059a610275565b5b60006105a984828501610570565b91505092915050565b60006dffffffffffffffffffffffffffff82169050919050565b6105d5816105b2565b81146105e057600080fd5b50565b6000815190506105f2816105cc565b92915050565b600063ffffffff82169050919050565b610611816105f8565b811461061c57600080fd5b50565b60008151905061062e81610608565b92915050565b60008060006060848603121561064d5761064c610275565b5b600061065b868287016105e3565b935050602061066c868287016105e3565b925050604061067d8682870161061f565b9150509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60006106c18261037d565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036106f3576106f2610687565b5b60018201905091905056fea2646970667358221220ee15b8090c8d4428eaf2f9ab14b0e8166af119cbe34df7bfea54371b70a8340f64736f6c63430008150033"

async function deployContract() {
    const factory = new ethers.ContractFactory(contractABI, contractBytecode, signer);
    const contract = await factory.deploy(); // Add constructor arguments if needed
  
    console.log("Deploying contract...");
    await contract.deployed();
    console.log("Contract deployed at:", contract.target);
  }
  
  deployContract().catch(console.error);